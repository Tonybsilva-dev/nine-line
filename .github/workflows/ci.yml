name: Nine Line CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  POSTGRES_DB: pool_appointments
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://localhost:6379
  NODE_ENV: test
  APP_PORT: 3333
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
  # Test values for CI - real values come from secrets
  JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
  JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
  REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
  REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}
  BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS || '12' }}
  RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS || '900000' }}
  RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS || '100' }}
  RATE_LIMIT_SENSITIVE_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_SENSITIVE_MAX_REQUESTS || '50' }}
  RATE_LIMIT_CRITICAL_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_CRITICAL_MAX_REQUESTS || '20' }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL || 'http://localhost:3000' }}
  BACKOFFICE_URL: ${{ secrets.BACKOFFICE_URL || 'http://localhost:3001' }}
  APP_URL: ${{ secrets.APP_URL || 'http://localhost:3333' }}
  ANDROID_APP_URL: ${{ secrets.ANDROID_APP_URL || 'https://play.google.com/store/apps/details?id=com.nineline.app' }}
  IOS_APP_URL: ${{ secrets.IOS_APP_URL || 'https://apps.apple.com/app/nine-line/id123456789' }}
  SMTP_HOST: ${{ secrets.SMTP_HOST || 'sandbox.smtp.mailtrap.io' }}
  SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
  SMTP_USER: ${{ secrets.SMTP_USER || 'test-user' }}
  SMTP_PASS: ${{ secrets.SMTP_PASS || 'test-pass' }}
  SMTP_SECURE: ${{ secrets.SMTP_SECURE || 'false' }}
  MAILTRAP_HOST: ${{ secrets.MAILTRAP_HOST || 'sandbox.smtp.mailtrap.io' }}
  MAILTRAP_PORT: ${{ secrets.MAILTRAP_PORT || '587' }}
  MAILTRAP_USER: ${{ secrets.MAILTRAP_USER || 'test-user' }}
  MAILTRAP_PASS: ${{ secrets.MAILTRAP_PASS || 'test-pass' }}
  MAILTRAP_FROM: ${{ secrets.MAILTRAP_FROM || 'noreply@nine-line.com' }}
  MAILTRAP_FROM_NAME: ${{ secrets.MAILTRAP_FROM_NAME || '9line Spaces' }}
  MAILTRAP_TOKEN: ${{ secrets.MAILTRAP_TOKEN || 'test-token' }}
  MAILTRAP_SENDER_EMAIL: ${{ secrets.MAILTRAP_SENDER_EMAIL || 'noreply@nine-line.com' }}
  MAILTRAP_SENDER_NAME: ${{ secrets.MAILTRAP_SENDER_NAME || '9line Spaces' }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN || 'https://test-sentry-dsn@test.ingest.sentry.io/test' }}
  LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
  DOCKER: ${{ secrets.DOCKER || 'false' }}

jobs:
  # ========================================
  # PRISMA CLIENT GENERATION (FIRST)
  # ========================================
  prisma-generate:
    name: Generate Prisma Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: |
          cd apps/api
          npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}

      - name: Cache Prisma client
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-client-${{ hashFiles('apps/api/prisma/schema.prisma') }}

  # ========================================
  # LINTING & TYPE CHECKING
  # ========================================
  lint-and-types:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-client-${{ hashFiles('apps/api/prisma/schema.prisma') }}

      - name: Generate Prisma client for type checking
        run: |
          cd apps/api
          npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}

      - name: Build UI package for type checking
        run: |
          cd packages/ui
          npm run build

      - name: Lint all packages
        run: npm run lint

      - name: Check TypeScript types
        run: npm run check-types

      - name: Format check
        run: npm run format -- --check

  # ========================================
  # UI PACKAGE TESTS & BUILD (FIRST)
  # ========================================
  ui-package:
    name: UI Package Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run UI package tests
        run: cd packages/ui && npm run test

      - name: Build UI package
        run: cd packages/ui && npm run build

      - name: Lint UI package
        run: cd packages/ui && npm run lint

      - name: Check UI package types
        run: cd packages/ui && npm run check-types

      - name: Cache UI package build
        uses: actions/cache@v4
        with:
          path: packages/ui/dist
          key: ui-package-${{ matrix.node-version }}-${{ hashFiles('packages/ui/package.json') }}

  # ========================================
  # API TESTS & BUILD
  # ========================================
  api-tests:
    name: API Tests & Build
    runs-on: ubuntu-latest
    needs: [prisma-generate]
    strategy:
      matrix:
        node-version: [20.x]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pool_appointments
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-client-${{ hashFiles('apps/api/prisma/schema.prisma') }}

      - name: Generate Prisma client for tests
        run: |
          cd apps/api
          npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}

      - name: Run database migrations
        run: cd apps/api && npm run prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments

      - name: Run API tests
        run: cd apps/api && npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}
          BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS || '12' }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS || '900000' }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS || '100' }}
          RATE_LIMIT_SENSITIVE_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_SENSITIVE_MAX_REQUESTS || '50' }}
          RATE_LIMIT_CRITICAL_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_CRITICAL_MAX_REQUESTS || '20' }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL || 'http://localhost:3000' }}
          BACKOFFICE_URL: ${{ secrets.BACKOFFICE_URL || 'http://localhost:3001' }}
          APP_URL: ${{ secrets.APP_URL || 'http://localhost:3333' }}
          ANDROID_APP_URL: ${{ secrets.ANDROID_APP_URL || 'https://play.google.com/store/apps/details?id=com.nineline.app' }}
          IOS_APP_URL: ${{ secrets.IOS_APP_URL || 'https://apps.apple.com/app/nine-line/id123456789' }}
          SMTP_HOST: ${{ secrets.SMTP_HOST || 'sandbox.smtp.mailtrap.io' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          SMTP_USER: ${{ secrets.SMTP_USER || 'test-user' }}
          SMTP_PASS: ${{ secrets.SMTP_PASS || 'test-pass' }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE || 'false' }}
          MAILTRAP_HOST: ${{ secrets.MAILTRAP_HOST || 'sandbox.smtp.mailtrap.io' }}
          MAILTRAP_PORT: ${{ secrets.MAILTRAP_PORT || '587' }}
          MAILTRAP_USER: ${{ secrets.MAILTRAP_USER || 'test-user' }}
          MAILTRAP_PASS: ${{ secrets.MAILTRAP_PASS || 'test-pass' }}
          MAILTRAP_FROM: ${{ secrets.MAILTRAP_FROM || 'noreply@nine-line.com' }}
          MAILTRAP_FROM_NAME: ${{ secrets.MAILTRAP_FROM_NAME || '9line Spaces' }}
          MAILTRAP_TOKEN: ${{ secrets.MAILTRAP_TOKEN || 'test-token' }}
          MAILTRAP_SENDER_EMAIL: ${{ secrets.MAILTRAP_SENDER_EMAIL || 'noreply@nine-line.com' }}
          MAILTRAP_SENDER_NAME: ${{ secrets.MAILTRAP_SENDER_NAME || '9line Spaces' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN || 'https://test-sentry-dsn@test.ingest.sentry.io/test' }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
          DOCKER: ${{ secrets.DOCKER || 'false' }}

      - name: Run API tests with coverage
        run: cd apps/api && npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}
          BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS || '12' }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS || '900000' }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS || '100' }}
          RATE_LIMIT_SENSITIVE_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_SENSITIVE_MAX_REQUESTS || '50' }}
          RATE_LIMIT_CRITICAL_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_CRITICAL_MAX_REQUESTS || '20' }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL || 'http://localhost:3000' }}
          BACKOFFICE_URL: ${{ secrets.BACKOFFICE_URL || 'http://localhost:3001' }}
          APP_URL: ${{ secrets.APP_URL || 'http://localhost:3333' }}
          ANDROID_APP_URL: ${{ secrets.ANDROID_APP_URL || 'https://play.google.com/store/apps/details?id=com.nineline.app' }}
          IOS_APP_URL: ${{ secrets.IOS_APP_URL || 'https://apps.apple.com/app/nine-line/id123456789' }}
          SMTP_HOST: ${{ secrets.SMTP_HOST || 'sandbox.smtp.mailtrap.io' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          SMTP_USER: ${{ secrets.SMTP_USER || 'test-user' }}
          SMTP_PASS: ${{ secrets.SMTP_PASS || 'test-pass' }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE || 'false' }}
          MAILTRAP_HOST: ${{ secrets.MAILTRAP_HOST || 'sandbox.smtp.mailtrap.io' }}
          MAILTRAP_PORT: ${{ secrets.MAILTRAP_PORT || '587' }}
          MAILTRAP_USER: ${{ secrets.MAILTRAP_USER || 'test-user' }}
          MAILTRAP_PASS: ${{ secrets.MAILTRAP_PASS || 'test-pass' }}
          MAILTRAP_FROM: ${{ secrets.MAILTRAP_FROM || 'noreply@nine-line.com' }}
          MAILTRAP_FROM_NAME: ${{ secrets.MAILTRAP_FROM_NAME || '9line Spaces' }}
          MAILTRAP_TOKEN: ${{ secrets.MAILTRAP_TOKEN || 'test-token' }}
          MAILTRAP_SENDER_EMAIL: ${{ secrets.MAILTRAP_SENDER_EMAIL || 'noreply@nine-line.com' }}
          MAILTRAP_SENDER_NAME: ${{ secrets.MAILTRAP_SENDER_NAME || '9line Spaces' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN || 'https://test-sentry-dsn@test.ingest.sentry.io/test' }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
          DOCKER: ${{ secrets.DOCKER || 'false' }}

      - name: Build API
        run: cd apps/api && npm run build

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage/lcov.info
          flags: api
          name: api-coverage

  # ========================================
  # WEB APP TESTS & BUILD (AFTER UI)
  # ========================================
  web-tests:
    name: Web App Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build UI package for this job
        run: |
          cd packages/ui
          npm run build

      - name: Run Web app tests
        run: cd apps/web && npm run test

      - name: Build Web app
        run: cd apps/web && npm run build
        env:
          NODE_ENV: production

      - name: Lint Web app
        run: cd apps/web && npm run lint

      - name: Check Web app types
        run: cd apps/web && npm run check-types

  # ========================================
  # BACKOFFICE TESTS & BUILD (AFTER UI)
  # ========================================
  backoffice-tests:
    name: Backoffice Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build UI package for this job
        run: |
          cd packages/ui
          npm run build

      - name: Run Backoffice tests
        run: cd apps/backoffice && npm run test

      - name: Build Backoffice
        run: cd apps/backoffice && npm run build
        env:
          NODE_ENV: production

      - name: Lint Backoffice
        run: cd apps/backoffice && npm run lint

      - name: Check Backoffice types
        run: cd apps/backoffice && npm run check-types

  # ========================================
  # DOCS TESTS & BUILD (AFTER UI)
  # ========================================
  docs-tests:
    name: Docs Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build UI package for this job
        run: |
          cd packages/ui
          npm run build

      - name: Run Docs tests
        run: cd apps/docs && npm run test

      - name: Build Docs
        run: cd apps/docs && npm run build
        env:
          NODE_ENV: production

      - name: Lint Docs
        run: cd apps/docs && npm run lint

      - name: Check Docs types
        run: cd apps/docs && npm run check-types

  # ========================================
  # DOCKER BUILD TESTS
  # ========================================
  docker-build:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    needs: [lint-and-types, api-tests, web-tests, backoffice-tests, docs-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        run: docker build -f apps/api/Dockerfile -t nine-line-api:test .

      - name: Build Web Docker image
        run: docker build -f apps/web/Dockerfile -t nine-line-web:test .

      - name: Build Backoffice Docker image
        run: docker build -f apps/backoffice/Dockerfile -t nine-line-backoffice:test .

      - name: Build Docs Docker image
        run: docker build -f apps/docs/Dockerfile -t nine-line-docs:test .

  # ========================================
  # INTEGRATION TESTS
  # ========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pool_appointments
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Prisma client cache
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-client-${{ hashFiles('apps/api/prisma/schema.prisma') }}

      - name: Generate Prisma client for integration tests
        run: |
          cd apps/api
          npm run prisma:generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}

      - name: Setup test environment
        run: |
          cd apps/api
          npm run prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          # Example: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-for-ci' }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN || '7d' }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET || 'test-refresh-token-secret-for-ci' }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN || '30d' }}
          BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS || '12' }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS || '900000' }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS || '100' }}
          RATE_LIMIT_SENSITIVE_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_SENSITIVE_MAX_REQUESTS || '50' }}
          RATE_LIMIT_CRITICAL_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_CRITICAL_MAX_REQUESTS || '20' }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL || 'http://localhost:3000' }}
          BACKOFFICE_URL: ${{ secrets.BACKOFFICE_URL || 'http://localhost:3001' }}
          APP_URL: ${{ secrets.APP_URL || 'http://localhost:3333' }}
          ANDROID_APP_URL: ${{ secrets.ANDROID_APP_URL || 'https://play.google.com/store/apps/details?id=com.nineline.app' }}
          IOS_APP_URL: ${{ secrets.IOS_APP_URL || 'https://apps.apple.com/app/nine-line/id123456789' }}
          SMTP_HOST: ${{ secrets.SMTP_HOST || 'sandbox.smtp.mailtrap.io' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          SMTP_USER: ${{ secrets.SMTP_USER || 'test-user' }}
          SMTP_PASS: ${{ secrets.SMTP_PASS || 'test-pass' }}
          SMTP_SECURE: ${{ secrets.SMTP_SECURE || 'false' }}
          MAILTRAP_HOST: ${{ secrets.MAILTRAP_HOST || 'sandbox.smtp.mailtrap.io' }}
          MAILTRAP_PORT: ${{ secrets.MAILTRAP_PORT || '587' }}
          MAILTRAP_USER: ${{ secrets.MAILTRAP_USER || 'test-user' }}
          MAILTRAP_PASS: ${{ secrets.MAILTRAP_PASS || 'test-pass' }}
          MAILTRAP_FROM: ${{ secrets.MAILTRAP_FROM || 'noreply@nine-line.com' }}
          MAILTRAP_FROM_NAME: ${{ secrets.MAILTRAP_FROM_NAME || '9line Spaces' }}
          MAILTRAP_TOKEN: ${{ secrets.MAILTRAP_TOKEN || 'test-token' }}
          MAILTRAP_SENDER_EMAIL: ${{ secrets.MAILTRAP_SENDER_EMAIL || 'noreply@nine-line.com' }}
          MAILTRAP_SENDER_NAME: ${{ secrets.MAILTRAP_SENDER_NAME || '9line Spaces' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN || 'https://test-sentry-dsn@test.ingest.sentry.io/test' }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL || 'info' }}
          DOCKER: ${{ secrets.DOCKER || 'false' }}

  # ========================================
  # SECURITY SCAN
  # ========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-types]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (production dependencies only)
        run: npm audit --audit-level=high --production

      - name: Run npm audit (dev dependencies with exceptions)
        run: |
          # Verifica dependências de desenvolvimento, mas ignora vulnerabilidades conhecidas em ferramentas de build
          npm audit --audit-level=high || {
            echo "⚠️  Vulnerabilidades encontradas em dependências de desenvolvimento"
            echo "🔍 Verificando se são apenas em ferramentas de build..."
            npm audit --audit-level=high | grep -E "(esbuild|tsup|vite|tsx)" || exit 1
            echo "✅ Apenas vulnerabilidades em ferramentas de build encontradas - continuando..."
          }

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ========================================
  # DEPLOY TO DEVELOPMENT
  # ========================================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    concurrency: deploy-development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all applications
        run: npm run build

      - name: Deploy to development environment
        run: |
          echo "🚀 Deploying to development environment..."
          echo "✅ API: http://dev-api.nine-line.com"
          echo "✅ Web: http://dev-web.nine-line.com"
          echo "✅ Backoffice: http://dev-backoffice.nine-line.com"
          echo "✅ Docs: http://dev-docs.nine-line.com"

  # ========================================
  # DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    concurrency: deploy-production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all applications
        run: npm run build

      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment..."
          echo "✅ API: https://api.nine-line.com"
          echo "✅ Web: https://nine-line.com"
          echo "✅ Backoffice: https://backoffice.nine-line.com"
          echo "✅ Docs: https://docs.nine-line.com"

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always() && (needs.deploy-development.result == 'failure' || needs.deploy-production.result == 'failure')

    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ Deployment failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs for more details." 