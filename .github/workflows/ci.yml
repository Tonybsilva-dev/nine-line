name: Nine Line CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  POSTGRES_DB: pool_appointments_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://localhost:6379

jobs:
  # ========================================
  # LINTING & TYPE CHECKING
  # ========================================
  lint-and-types:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint all packages
        run: npm run lint

      - name: Check TypeScript types
        run: npm run check-types

      - name: Format check
        run: npm run format -- --check

  # ========================================
  # UI PACKAGE TESTS & BUILD (FIRST)
  # ========================================
  ui-package:
    name: UI Package Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run UI package tests
        run: cd packages/ui && npm run test

      - name: Build UI package
        run: cd packages/ui && npm run build

      - name: Lint UI package
        run: cd packages/ui && npm run lint

      - name: Check UI package types
        run: cd packages/ui && npm run check-types

  # ========================================
  # API TESTS & BUILD
  # ========================================
  api-tests:
    name: API Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pool_appointments_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: cd apps/api && npm run prisma:generate

      - name: Run database migrations
        run: cd apps/api && npm run prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments_test

      - name: Run API tests
        run: cd apps/api && npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run API tests with coverage
        run: cd apps/api && npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Build API
        run: cd apps/api && npm run build

      - name: Upload API coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage/lcov.info
          flags: api
          name: api-coverage

  # ========================================
  # WEB APP TESTS & BUILD (AFTER UI)
  # ========================================
  web-tests:
    name: Web App Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    needs: [ui-package]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Web app tests
        run: cd apps/web && npm run test

      - name: Build Web app
        run: cd apps/web && npm run build

      - name: Lint Web app
        run: cd apps/web && npm run lint

      - name: Check Web app types
        run: cd apps/web && npm run check-types

  # ========================================
  # BACKOFFICE TESTS & BUILD (AFTER UI)
  # ========================================
  backoffice-tests:
    name: Backoffice Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    needs: [ui-package]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Backoffice tests
        run: cd apps/backoffice && npm run test

      - name: Build Backoffice
        run: cd apps/backoffice && npm run build

      - name: Lint Backoffice
        run: cd apps/backoffice && npm run lint

      - name: Check Backoffice types
        run: cd apps/backoffice && npm run check-types

  # ========================================
  # DOCS TESTS & BUILD (AFTER UI)
  # ========================================
  docs-tests:
    name: Docs Tests & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    needs: [ui-package]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Docs tests
        run: cd apps/docs && npm run test

      - name: Build Docs
        run: cd apps/docs && npm run build

      - name: Lint Docs
        run: cd apps/docs && npm run lint

      - name: Check Docs types
        run: cd apps/docs && npm run check-types

  # ========================================
  # DOCKER BUILD TESTS
  # ========================================
  docker-build:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    needs: [lint-and-types, api-tests, web-tests, backoffice-tests, docs-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        run: docker build -f apps/api/Dockerfile -t nine-line-api:test .

      - name: Build Web Docker image
        run: docker build -f apps/web/Dockerfile -t nine-line-web:test .

      - name: Build Backoffice Docker image
        run: docker build -f apps/backoffice/Dockerfile -t nine-line-backoffice:test .

      - name: Build Docs Docker image
        run: docker build -f apps/docs/Dockerfile -t nine-line-docs:test .

  # ========================================
  # INTEGRATION TESTS
  # ========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: pool_appointments_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cd apps/api
          npm run prisma:generate
          npm run prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments_test

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          # Example: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pool_appointments_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # ========================================
  # SECURITY SCAN
  # ========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-types]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ========================================
  # DEPLOY TO DEVELOPMENT
  # ========================================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    concurrency: deploy-development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all applications
        run: npm run build

      - name: Deploy to development environment
        run: |
          echo "🚀 Deploying to development environment..."
          echo "✅ API: http://dev-api.nine-line.com"
          echo "✅ Web: http://dev-web.nine-line.com"
          echo "✅ Backoffice: http://dev-backoffice.nine-line.com"
          echo "✅ Docs: http://dev-docs.nine-line.com"

  # ========================================
  # DEPLOY TO PRODUCTION
  # ========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    concurrency: deploy-production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all applications
        run: npm run build

      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment..."
          echo "✅ API: https://api.nine-line.com"
          echo "✅ Web: https://nine-line.com"
          echo "✅ Backoffice: https://backoffice.nine-line.com"
          echo "✅ Docs: https://docs.nine-line.com"

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always() && (needs.deploy-development.result == 'failure' || needs.deploy-production.result == 'failure')

    steps:
      - name: Notify deployment failure
        run: |
          echo "❌ Deployment failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs for more details." 