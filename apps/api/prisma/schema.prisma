generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model User {
  id        String     @id @default(cuid()) @map("id")
  name      String     @map("name")
  email     String     @unique @map("email")
  password  String     @map("password")
  status    UserStatus @default(ACTIVE) @map("status")
  role      UserRole   @default(USER) @map("role")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")

  appointments            Appointment[]
  space                   Space?
  Rating                  Rating[]
  userRoleAssignments     UserRoleAssignment[]
  assignedRoleAssignments UserRoleAssignment[] @relation("UserRoleAssignedBy")
  notifications           Notification[]
  userPreferences         UserPreferences?

  @@map("users")
}

model Space {
  id            String        @id @default(uuid()) @map("id")
  title         String        @map("title")
  description   String        @map("description")
  photos        String[]      @map("photos")
  hostId        String        @unique @map("host_id")
  host          User          @relation(fields: [hostId], references: [id])
  amenities     Amenity[]     @relation("space_amenities")
  rules         String        @map("rules")
  address       Address?
  geoLocation   GeoLocation?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  Rating        Rating[]
  appointments  Appointment[]
  averageRating Float         @default(0) @map("average_rating")

  @@map("spaces")
}

model Address {
  id      String  @id @default(uuid()) @map("id")
  street  String  @map("street")
  number  String  @map("number")
  city    String  @map("city")
  state   String  @map("state")
  zipCode String  @map("zip_code")
  space   Space?  @relation(fields: [spaceId], references: [id])
  spaceId String? @unique @map("space_id")

  @@map("addresses")
}

model GeoLocation {
  id        String  @id @default(uuid()) @map("id")
  latitude  Float   @map("latitude")
  longitude Float   @map("longitude")
  space     Space?  @relation(fields: [spaceId], references: [id])
  spaceId   String? @unique @map("space_id")

  @@map("geo_locations")
}

model Amenity {
  id     String  @id @default(uuid()) @map("id")
  name   String  @map("name")
  spaces Space[] @relation("space_amenities")

  @@map("amenities")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

model Appointment {
  id           String            @id @default(cuid()) @map("id")
  userId       String            @map("user_id")
  spaceId      String            @map("space_id")
  date         DateTime          @map("date")
  startTime    DateTime          @map("start_time")
  endTime      DateTime          @map("end_time")
  status       AppointmentStatus @default(PENDING) @map("status")
  cancelReason String?           @map("cancel_reason")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  originalDate DateTime? @map("original_date")
  changeCount  Int       @default(0) @map("change_count")
  maxChanges   Int       @default(3) @map("max_changes")

  user  User  @relation(fields: [userId], references: [id])
  space Space @relation(fields: [spaceId], references: [id])

  @@map("appointments")
}

model Rating {
  id        String   @id @default(uuid()) @map("id")
  spaceId   String   @map("space_id")
  userId    String   @map("user_id")
  score     Int      @map("score")
  comment   String?  @map("comment")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([spaceId, userId])
  @@map("ratings")
}

// RBAC System
model Permission {
  id          String   @id @default(uuid()) @map("id")
  name        String   @unique @map("name")
  description String   @map("description")
  resource    String   @map("resource")
  action      String   @map("action")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id          String   @id @default(uuid()) @map("id")
  name        String   @unique @map("name")
  description String   @map("description")
  level       Int      @default(0) @map("level") // Hierarchy level: 0=USER, 1=MANAGER, 2=ADMIN
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  rolePermissions     RolePermission[]
  userRoleAssignments UserRoleAssignment[]

  @@map("roles")
}

model RolePermission {
  id           String   @id @default(uuid()) @map("id")
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoleAssignment {
  id         String    @id @default(uuid()) @map("id")
  userId     String    @map("user_id")
  roleId     String    @map("role_id")
  assignedBy String?   @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")

  user           User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("UserRoleAssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_role_assignments")
}

// Notification System
model NotificationTemplate {
  id        String   @id @default(uuid()) @map("id")
  name      String   @unique @map("name")
  type      String   @map("type") // EMAIL, SMS, PUSH
  subject   String?  @map("subject")
  body      String   @map("body")
  variables String[] @map("variables")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  notifications Notification[]

  @@map("notification_templates")
}

model Notification {
  id         String    @id @default(uuid()) @map("id")
  userId     String    @map("user_id")
  type       String    @map("type") // EMAIL, SMS, PUSH
  templateId String    @map("template_id")
  status     String    @default("PENDING") @map("status") // PENDING, SENT, FAILED
  payload    Json      @map("payload")
  error      String?   @map("error")
  sentAt     DateTime? @map("sent_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  user     User                 @relation(fields: [userId], references: [id])
  template NotificationTemplate @relation(fields: [templateId], references: [id])

  @@map("notifications")
}

model UserPreferences {
  id                String   @id @default(uuid()) @map("id")
  userId            String   @unique @map("user_id")
  emailEnabled      Boolean  @default(true) @map("email_enabled")
  smsEnabled        Boolean  @default(false) @map("sms_enabled")
  pushEnabled       Boolean  @default(true) @map("push_enabled")
  preferredLanguage String   @default("pt-BR") @map("preferred_language")
  timezone          String   @default("America/Sao_Paulo") @map("timezone")
  dateFormat        String   @default("DD/MM/YYYY") @map("date_format")
  timeFormat        String   @default("24h") @map("time_format")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}
